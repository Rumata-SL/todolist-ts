{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasks","tasks","items","removeTaskTC","addTaskTC","updateTaskTC","getState","task","find","t","apiModel","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","todoListId","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","err","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e2035eaa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4230ac11-a8d8-4cef-b716-b88af9bc0510'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string, error: string };\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?:Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC,setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some' + ' error occurred'}))\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n","import {setAppStatusAC} from \"../../app/app-reducer\"\r\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolists-api\"\r\nimport {\r\n    handleServerAppError,\r\n    handleServerNetworkError\r\n} from \"../../utils/error-utils\"\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType>}}>(\"auth/login\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            // thunkAPI.dispatch(setIsLoggedInAC({value: true}))\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({\r\n                errors: res.data.messages,\r\n                fieldsErrors: res.data.fieldsErrors\r\n            })\r\n        }\r\n    } catch (e) {\r\n        const error = e as Error | AxiosError<{ error: string }>\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({\r\n            errors: [error.message],\r\n            fieldsErrors: undefined\r\n        })\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk(\"auth/logout\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await authAPI.logout()\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (err) {\r\n        const error = err as Error | AxiosError<{ error: string }>\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\nexport const {setIsLoggedInAC} = slice.actions\r\n","import {authAPI} from \"../api/todolists-api\"\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\"\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const initializeAppTC = createAsyncThunk(\"app/initializeApp\", async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}));\r\n    } else {\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        status: \"idle\",\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{ status: RequestStatusType }>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{ error: string | null }>) => {\r\n            state.error = action.payload.error\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\r\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\"\r\nimport {RequestStatusType, setAppStatusAC,} from \"../../app/app-reducer\"\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\"\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport const fetchTodolistsTC = createAsyncThunk(\"todolists/fetchTodolists\", async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.getTodolists()\r\n    try {\r\n        // thunkAPI.dispatch(setTodolistsAC({todolists:res.data}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {todolists: res.data}\r\n    } catch (e) {\r\n        const error = e as Error | AxiosError<{ error: string }>\r\n        handleServerNetworkError(error, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk(\"todolists/removeTodolist\", async (param: { todolistId: string }, thunkAPI) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({\r\n        id: param.todolistId,\r\n        status: \"loading\"\r\n    }))\r\n    const res = await todolistsAPI.deleteTodolist(param.todolistId)\r\n    try {\r\n        // thunkAPI.dispatch(removeTodolistAC({id: param.todolistId}))\r\n        //скажем глобально приложению, что асинхронная операция завершена\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {id: param.todolistId}\r\n    } catch (e) {\r\n        const error = e as Error | AxiosError<{ error: string }>\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk(\"todolists/addTodolist\", async (param: { title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.createTodolist(param.title)\r\n    try {\r\n        // thunkAPI.dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {todolist: res.data.data.item}\r\n    } catch (e) {\r\n        const error = e as Error | AxiosError<{ error: string }>\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk(\"todolists/changeTodolistTitle\", async (param: {\r\n    id: string,\r\n    title: string\r\n}, thunkAPI) => {\r\n\r\n    const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        try {\r\n            // thunkAPI.dispatch(changeTodolistTitleAC({id: param.id, title: param.title}))\r\n            return {id: param.id, title: param.title}\r\n        }catch (e) {\r\n            const error = e as Error | AxiosError<{ error: string }>\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        /*addTodolistAC: (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n            state.unshift({\r\n                ...action.payload.todolist,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\"\r\n            })\r\n        },*/\r\n        /*changeTodolistTitleAC: (state, action: PayloadAction<{ id: string, title: string }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },*/\r\n        changeTodolistFilterAC: (state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, status: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\"\r\n            }))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({\r\n                ...action.payload.todolist,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\"\r\n            })\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n} = slice.actions\r\n\r\n// thunks\r\n/*export const fetchTodolistsTC_ = () => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists:res.data}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}*/\r\n/*export const removeTodolistTC_ = (todolistId: string) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({\r\n            id: todolistId,\r\n            status: \"loading\"\r\n        }))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            })\r\n    }\r\n}*/\r\n/*export const addTodolistTC_ = (title: string) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            })\r\n    }\r\n}*/\r\n/*export const changeTodolistTitleTC_ = (id: string, title: string) => {\r\n    return (dispatch: AppDispatchType) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id: id, title: title}))\r\n            })\r\n    }\r\n}*/\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n// types\r\n/*export type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;*/\r\n/*type ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>*/\r\n\r\n\r\n// type ThunkDispatch = Dispatch<ActionsType>\r\n// type ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n\r\n/*export const _todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id != action.id)\r\n        case \"ADD-TODOLIST\":\r\n            return [{\r\n                ...action.todolist,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\"\r\n            }, ...state]\r\n\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.id ? {\r\n                ...tl,\r\n                title: action.title\r\n            } : tl)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.id ? {\r\n                ...tl,\r\n                filter: action.filter\r\n            } : tl)\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {\r\n                ...tl,\r\n                entityStatus: action.status\r\n            } : tl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\"\r\n            }))\r\n        default:\r\n            return state\r\n    }\r\n}*/\r\n// actions\r\n/*export const removeTodolistAC = (id: string) => ({\r\n    type: \"REMOVE-TODOLIST\",\r\n    id\r\n} as const)*/\r\n/*export const addTodolistAC = (todolist: TodolistType) => ({\r\n    type: \"ADD-TODOLIST\",\r\n    todolist\r\n} as const)*/\r\n/*export const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    id,\r\n    title\r\n} as const)*/\r\n/*export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    id,\r\n    filter\r\n} as const)*/\r\n/*export const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: \"CHANGE-TODOLIST-ENTITY-STATUS\", id, status\r\n} as const)*/\r\n/*export const setTodolistsAC = (todolists: Array<TodolistType>) => ({\r\n    type: \"SET-TODOLISTS\",\r\n    todolists\r\n} as const)*/","import {\r\n    addTodolistTC,\r\n    fetchTodolistsTC, removeTodolistTC,\r\n} from \"./todolists-reducer\"\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from \"../../api/todolists-api\"\r\n\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {setAppStatusAC,} from \"../../app/app-reducer\"\r\nimport {\r\n    handleServerAppError,\r\n    handleServerNetworkError\r\n} from \"../../utils/error-utils\"\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk(\"tasks/fetchTasks\", async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n            const tasks = res.data.items\r\n            thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return {tasks, todolistId}\r\n\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk(\"tasks/removeTask\", async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\nexport const addTaskTC = createAsyncThunk(\"tasks/addTask\", async (param: { title: string, todolistId: string}, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n\r\n    const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch (e) {\r\n            const error = e as Error | AxiosError<{ error: string }>\r\n            handleServerNetworkError(error, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n})\r\n\r\nexport const updateTaskTC = createAsyncThunk(\"tasks/updateTask\", async (param: {taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string}, {dispatch, rejectWithValue, getState}) => {\r\n\r\n    const state = getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        //throw new Error(\"task not found in the state\");\r\n        // console.warn(\"task not found in the state\")\r\n        return rejectWithValue(\"task not found in the state\")\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                return param\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue(null)\r\n            }\r\n        } catch(e){\r\n            const error = e as Error | AxiosError<{ error: string }>\r\n            handleServerNetworkError(error, dispatch);\r\n            return rejectWithValue(null)\r\n        }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasks} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasks(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\"\r\nimport {\r\n    addTaskTC,\r\n    removeTaskTC,\r\n    TasksStateType,\r\n    updateTaskTC\r\n} from \"./tasks-reducer\"\r\nimport {TaskStatuses} from \"../../api/todolists-api\"\r\nimport {Grid, Paper} from \"@material-ui/core\"\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\"\r\nimport {Todolist} from \"./Todolist/Todolist\"\r\nimport {Redirect} from \"react-router-dom\"\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({\r\n            taskId: id,\r\n            domainModel: {status},\r\n            todolistId: todolistId\r\n        })\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({\r\n            taskId: id,\r\n            domainModel: {title: newTitle},\r\n            todolistId: todolistId\r\n        })\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC({todolistId: id})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC({title: title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {combineReducers} from \"redux\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {appReducer} from \"./app-reducer\"\r\nimport {authReducer} from \"../features/Login/auth-reducer\"\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\nexport type RootReducerType = typeof rootReducer\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// export type AppRootActionsType =\r\n// export type ThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, Action>\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from \"react\"\r\nimport {\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    TextField,\r\n    Button,\r\n    Grid\r\n} from \"@material-ui/core\"\r\nimport {useFormik} from \"formik\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {loginTC} from \"./auth-reducer\"\r\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\"\r\nimport {Redirect} from \"react-router-dom\"\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: \"Email is required\"\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: \"Password is required\"\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values, formikHelpers) => {\r\n            const action = await dispatch(loginTC(values));\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const err= action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(err.field, err.error)\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a\r\n                            href={\"https://social-network.samuraijs.com/\"}\r\n                            target={\"blank\"}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div\r\n                            style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ?\r\n                            <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={\"Remember me\"}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={\"submit\"} variant={\"contained\"}\r\n                                color={\"primary\"}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./app/App\";\r\nimport {store} from \"./app/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}